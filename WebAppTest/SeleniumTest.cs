using System;using OpenQA.Selenium;using OpenQA.Selenium.Chrome;using Xunit;using System.Linq;namespace WebAppTest{    public class SeleniumTest : TestsBase    {        private string _userEmail = "user@user.pl";        private string _adminEmail = "admin@admin.pl";        private string _password = "TestowanieNet12#";        private string _notLoggedIn = "It seems like you are not logged in";        private string _titleWarning = "Are you sure you want to delete this?";        [Fact]        public void Index_ShouldShowUserNotLoggedIn()        {            Driver.Navigate().GoToUrl("https://localhost:44319/");            var helloText = Driver.FindElement(By.Id("hello")).Text;            Assert.Contains(_notLoggedIn, helloText);        }        [Fact]        public void Index_CanLoginWithoutEntryAnyData()        {            Driver.Navigate().GoToUrl("https://localhost:44319/");            Driver.FindElement(By.Id("btnLogin")).Click();            Driver.FindElement(By.Id("btnUserLogin")).Click();            var message = Driver.FindElement(By.XPath("//li[contains(.,'required')]")).Text;            Assert.Contains("field is required", message);        }        [Fact]        public void Index_LoginWithProperValues_ShouldLogin()        {            Driver.Navigate().GoToUrl("https://localhost:44319/");            LoginUser(_userEmail, _password);            var message = Driver.FindElement(By.Id("hello")).Text;            Assert.Contains("Hello " + _userEmail, message);        }        [Fact]        public void User_IsVisibleUserNameAfterLogin()        {            Driver.Navigate().GoToUrl("https://localhost:44319/");            LoginUser(_userEmail, _password);            var username = Driver.FindElement(By.Name("userNameOptions")).Text;            Assert.Contains("Hello " + _userEmail, username);        }        [Fact]        public void Index_NoUserLoggedIn_HaveNoTabs_ShouldThrowExceptions()        {            Driver.Navigate().GoToUrl("https://localhost:44319/");            Assert.Throws<NoSuchElementException>(() => Driver.FindElement(By.Id("employeeSection")));            Assert.Throws<NoSuchElementException>(() => Driver.FindElement(By.Id("artistSection")));            Assert.Throws<NoSuchElementException>(() => Driver.FindElement(By.Id("sessionSection")));        }        [Fact]        public void User_HaveOnlySessionsTab_ShouldThrowExceptions()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_userEmail, _password);            var sections = Driver.FindElements(By.Id("sections"));            var sessionsSectioName = sections.Where(s => s.Text.Contains("Sessions")).FirstOrDefault().Text;            Assert.Single(sections);            Assert.Contains("Sessions", sessionsSectioName);        }        [Fact]        public void User_Sessions_ShouldOpenProperPage()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_userEmail, _password);            Driver.FindElement(By.Id("sessionSection")).Click();            var viewName = Driver.FindElement(By.Id("viewName")).Text;            Assert.Contains("Sessions", viewName);        }        [Fact]        public void User_Sessions_DontHaveCreateButton()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_userEmail, _password);            Driver.Navigate().GoToUrl("https://localhost:44319/Sessions");            Assert.Throws<NoSuchElementException>(() => Driver.FindElement(By.Id("btnCreate")));        }        [Fact]        public void Admin_HaveEverySections()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_adminEmail, _password);            var heheszek = Driver.FindElements(By.Name("sections"));            Assert.Equal(3, heheszek.Count);            Assert.Contains("Artists", heheszek[0].Text);            Assert.Contains("Employees", heheszek[1].Text);            Assert.Contains("Sessions", heheszek[2].Text);        }        [Fact]        public void Navigate_ClickOnMusicStudioButton_ShouldNavigateToHome()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_userEmail, _password);            Driver.Navigate().GoToUrl("https://localhost:44319/Sessions");            Driver.FindElement(By.ClassName("navbar-brand")).Click();            var message = Driver.FindElement(By.Id("hello")).Text;            Assert.Contains("Hello " + _userEmail, message);        }        [Fact]        public void Session_ClickOnCreate_ShouldNavigateToCreatePage()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_adminEmail, _password);            Driver.Navigate().GoToUrl("https://localhost:44319/Sessions");            Driver.FindElement(By.Id("btnCreate")).Click();            var createPageTitles = Driver.FindElement(By.Id("page")).Text + " "                + Driver.FindElement(By.Id("createPage")).Text;            Assert.Contains("Create Session", createPageTitles);        }        [Fact]        public void Session_ClickOnDetils_ShouldNavigateToDetailsPage()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_adminEmail, _password);            Driver.Navigate().GoToUrl("https://localhost:44319/Sessions");            Driver.FindElement(By.Id("btnDetails")).Click();            var createPageTitles = Driver.FindElement(By.Id("page")).Text + " "                + Driver.FindElement(By.Id("detailsPage")).Text;            Assert.Contains("Details Session", createPageTitles);        }        [Fact]        public void Session_ClickOnDelete_ShouldNavigateToDeletePage()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_adminEmail, _password);            Driver.Navigate().GoToUrl("https://localhost:44319/Sessions");            Driver.FindElement(By.Id("btnDelete")).Click();            var createPageTitles = Driver.FindElement(By.Id("page")).Text + " "                + Driver.FindElement(By.Id("deletePage")).Text;            var warningMsg = Driver.FindElement(By.Id("titleWarning")).Text;            Assert.Contains("Delete Session", createPageTitles);            Assert.Contains(_titleWarning, warningMsg);        }        [Fact]        public void Session_ClickOnEit_ShouldNavigateToEditPage()        {            Driver.Navigate().GoToUrl("https://localhost:44319/Account/Login");            LoginUser(_adminEmail, _password);            Driver.Navigate().GoToUrl("https://localhost:44319/Sessions");            Driver.FindElement(By.Id("btnEdit")).Click();            var createPageTitles = Driver.FindElement(By.Id("page")).Text + " "                + Driver.FindElement(By.Id("editPage")).Text;            Assert.Contains("Edit Session", createPageTitles);        }        private void LoginUser(string email, string password)        {            Driver.FindElement(By.Id("btnLogin")).Click();            Driver.FindElement(By.Id("Email")).SendKeys(email);            Driver.FindElement(By.Id("Password")).SendKeys(password);            Driver.FindElement(By.Id("btnUserLogin")).Click();        }    }    public abstract class TestsBase : IDisposable    {        public IWebDriver Driver { get; set; }        protected TestsBase()        {            //Driver = new ChromeDriver("/Users/michalniskowski/");            var dir = System.IO.Directory.GetCurrentDirectory();            Driver = new ChromeDriver(dir);        }        public void Dispose()        {            Driver.Close();        }    }}